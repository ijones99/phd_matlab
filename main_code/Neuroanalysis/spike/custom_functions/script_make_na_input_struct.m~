% script_make_na_input_struct
% 
% ---------------------------------------------
% datafile
%     Describes the file that contains the data.
% site
%     Describes the physical location(s) from which the data was obtained.
... In our framework, a data set should only contain multiple sites only if 
...the sites were recorded simultaneously. Data from sites that were recorded
... sequentially should appear in separate file pairs.
% category
%     Describes the groups in which the spike trains are partitioned. 
... This is required because the spike trains must be classified into
... discrete categories for use with the toolkit.
% trace
%     Describes the spike trains contained in the data file. 
% ---------------------------------------------

% Get the timestamps
% % each group of stimuli contains several repetitions
% numRepsPerGroup = 5; % number of repetitions per stimulus group
% numStimGroups = 3; % number of such groups
% stimGroupAllReps = [0:numRepsPerGroup:numRepsPerGroup*(numStimGroups-1)]+stimGroup;
% % the group numbers for the stimulus of interest
%
% data
iNeuron = 13;
% all spikes for this neur
spiketrainEntire = tsMatrix{iNeuron}.spikeTimes;
stimGroup = [[11]+0 [ 11]+1];
numStartStopTsPerStimulusCluster = 11; 

indStimTsBasicPattern = [1 3 5 7 9];
indStimTs = [];
for i=1:length(stimGroup)
    indStimTs = [indStimTs indStimTsBasicPattern+11*(stimGroup(i)-1) ];
end

selSpikes = {};
for iRep = 1:length(indStimTs)
    
    stimStartTs = stimFramesTsStartStop(indStimTs(iRep))/acqRate;
    stimStopTs = stimFramesTsStartStop(indStimTs(iRep)+1)/acqRate;
    
    selSpikes{iRep,1} = double(get_selected_spikes(spiketrainEntire, stimStartTs, stimStopTs, 'align_to_zero'));
%     dlmwrite('data/test.stad', selSpikes{iRep}, 'delimiter', ' ','-append');
    
end
% ---------------------------------------------
%% make output struct

clear X
% Number of stimulus classes in experiment
X.M = 2;

% Number of sites in experiment. 
X.N = 1;

% Array of structures with recording site information

X.sites.label = {strcat(['Neuron ', strrep(fileNames(selNeurs).name,'_','-')])};
X.sites.recording_tag = {'episodic'};
X.sites.time_scale = 1;
X.sites.time_resolution = 1.0000e-04;
X.sites.si_unit = 'none';
X.sites.si_prefix = 1;
%
% 'Original_Movie'; ...
%     'Stat_Surr_Median_Whole_Movie';...
%
% 'Dynamic_Surr_Median_Each_Frame';...
%     'Dynamic_Surr_Shuffled_Median_Each_Frame';...
%     'Pixelated_Surr_Shuffled_25_Percent_Each_Frame';...
%     'Pixelated_Surr_Shuffled_75_Percent_Each_Frame';...
%     'Pixelated_Surr_Shuffled_100_Percent_Each_Frame'...
%
% trials
numTrials = length(selSpikes);
catLabels = {'orig-movie', ...
    'stat-med-surr', ...
    'dynamic-med-surr', ...
    'dynamic-med-surr-shuffled', ...
    'pix-surr-shuffled-75-percent'};
% catLabelsInds = [1*ones(1,5) 2*ones(1,5) 3*ones(1,5) 4*ones(1,5) 5*ones(1,5)];
numTrials = 5;
iNeur = 1;
for j=1:X.M
    for i=1:numTrials
        X.categories(j).trials(i).start_time = 0;
        X.categories(j).trials(i).end_time = 9.7649;
        X.categories(j).trials(i).Q = int32(length(selSpikes{iNeur}));
        X.categories(j).trials(i).list = selSpikes{iNeur};
        iNeur = iNeur+1;
    end
    X.categories(j).label = catLabels(j);
    X.categories(j).P = numTrials;
    X.categories(j).trials = X.categories(j).trials';
end

% Array of structures with categorized response data
%


