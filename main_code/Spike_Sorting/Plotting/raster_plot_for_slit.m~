function raster_plot_for_slit(fileNo, flistName,neuronNoToCompare)
%% raster plot
flistFileNameID = flistName(end-21:end-11);

DATA_DIR = '../analysed_data/'
FILE_DIR = strcat(DATA_DIR, flistFileNameID,'/');
flist = {};
flist_for_analysis;

% vars
rowSpacing = 1;
rangeLim = 0.42;
acqRate = 20000; % samples per second

% get timestamps
binWidthMs = 0.5; % bin size for matching spikes
flistFileNameID = flistName(end-21:end-11);

% create heatmap of matching ts.
[heatMap, neuronTs] = find_redundant_ts(binWidthMs,flistFileNameID);

%% create timestamp vectors

% -------------  variable settings -------------
doPlot = 1;

if doPlot
    fullscreen = get(0,'ScreenSize');
    figure('Position',[0 -50 fullscreen(3) fullscreen(4)])
    hold on
end

% load stimframes (light_ts)
eval(['load ', FILE_DIR,...
    'frameno_',flistFileNameID,'.mat']);

% light_ts=(find(diff(double(ntk2.images.frameno))==1)+860);
stimFrames= frameno;

stimFramesShift = 860; % compensate for delay of projector
stimFrames(end:end+stimFramesShift) = 0;% put zeros into matrix
stimFrames(stimFramesShift+1:end) = stimFrames(1:end-stimFramesShift); % slide ts forward in time
stimFrames(1:stimFramesShift)=0;%put zeros where first 860 frames were

stimFrames = double(stimFrames);
stimFramesSw = diff(stimFrames);

% value of one at switches
stimFramesSw(2:end)=stimFramesSw(1:end-1);

% timestapms of stimulus frames: everytimepoint is a location where  the
% parapin was switched.
stimFramesTs = find(stimFramesSw==1);

% find start and end of stimulus movements
stimFramesTsStartStop = stimFramesTs(2:end)-stimFramesTs(1:end-1);

% shift values back one position
stimFramesTsStartStop(2:end)=stimFramesTsStartStop(1:end-1);

% find locations where stimulus starts (where there is a break of >1
% second)
[Y stimStartInd] = find(stimFramesTsStartStop>1*20000);
stimEndInd = find(stimFramesTsStartStop>1*20000)-1;stimEndInd = stimEndInd(find(stimEndInd>0));
stimFramesTsStartStop= stimFramesTs( [stimStartInd  stimEndInd   ]);
stimFramesTsStartStop(2:end+1) = stimFramesTsStartStop(1:end);
% add first stim frame
stimFramesTsStartStop(1) = stimFramesTs(1);
stimFramesTsStartStop = sort(stimFramesTsStartStop);

% stimFramesTsStartStop contains all locations where stimulus started and
% stopped; odd values are the start points and even values are the end
% points

%% Create a matrix containing the important parameters and associated
% timestamp

load StimFiles/StimParams_05_Curtains.mat

paramRef = zeros(4,1);
j=1;k=1;
for iHeight = Settings.CURTAIN_HEIGHT_PX*1.7
    for iVel = Settings.CURTAIN_DRIFT_VEL_PX*1.7
        
        for iBrightness = Settings.CURTAIN_BRIGHTNESS
            for iRepeats = 1:Settings.CURTAIN_REPEATS
                paramRef(:, j) = [ iBrightness; ...
                    iVel; iHeight; ...
                    stimFramesTsStartStop(k);
                    
                    ];
                
                j=j+1;
                k=k+2;
            end
        end
    end
end

paramRef = round(paramRef);

%% Get Neurons to Compare
% figure

brightnessValues = [255 0];
thresholdValues = [0.15  ];
sz = get( 0, 'ScreenSize' );
h = figure('Position', [sz]), hold on

iPlot = 1;
for iNeuronNoToCompare = 1:length(neuronNoToCompare);
    
    for iThresh = 1:length(thresholdValues)
        for iBrightness = 1:length(brightnessValues)
            
            neuronMatchVals = heatMap(neuronNoToCompare(iNeuronNoToCompare),:);
            thrVal = thresholdValues(iThresh);
            selNeuronIndToCompare = find(neuronMatchVals >thrVal);
            
            % plot raster plot from selected conditions
            % pick stimuli
            brightness = brightnessValues(iBrightness);
            driftVel = 600;
            curtainHeight = 600;
            paramRefSelInd = intersect(find(paramRef(1,:)== brightness), find(paramRef(2,:)== driftVel));
            paramRefSelInd = intersect(paramRefSelInd, find(paramRef(3,:)== curtainHeight))
            stimNoToPlot = paramRefSelInd(1);
            
            %% subplot
            figure(h)
            subplot(length(thresholdValues)*length(brightnessValues)...
                *length(neuronNoToCompare)/2,2,iPlot), hold on
            
            %% title plot
            title(strcat('Comparison of Neuron Timestamps (br ', num2str(brightness), ', vel ', num2str(driftVel),',height', ...
                num2str(curtainHeight),', thr ',num2str(thrVal ),' neurInd ',num2str(neuronNoToCompare(iNeuronNoToCompare)) ,' )'),'FontSize', 14);
            strcat('Comparison of Neuron Timestamps (br ', num2str(brightness), ', vel ', num2str(driftVel),',height', ...
                num2str(curtainHeight),', thr ',num2str(thrVal ),' neurInd ',num2str(neuronNoToCompare(iNeuronNoToCompare)) ,' )')
            %% ....continue
            stimulusNo =stimNoToPlot*2-1;
            neursToCompare=[ selNeuronIndToCompare];
            neursToCompare = 1:82;
            % Variable Settings
            acqRate = 20000;
            preTimePlot = 1;% 20*acqRate; % seconds * frames
            postTimePlot = 5;% 40*acqRate; % seconds * frames
            
            stimStartFr = stimFramesTsStartStop(stimulusNo:stimulusNo+1)/acqRate;% - paramRef(4, paramRefSelInd(1))
            stimEndFr = stimStartFr(2); % in seconds
            stimChangeFr = stimStartFr-stimStartFr(1);
            startFrame = stimStartFr(1)-preTimePlot;
            endFrame = stimStartFr(1)+postTimePlot;
            
            colorMap = jet(100);
            % colorbar
            iSpacing = 1;
            
            % get names for files
            % directory
            dirName = strcat('../analysed_data/', flistFileNameID ,'/03_Neuron_Selection/');
            
            % file types to open
            fileNamePattern = fullfile(dirName,'st_*mat');
            
            % obtain file names
            fileNames = dir(fileNamePattern);
            
            inputStructName_st = {};
            main_el_avg_amp= [];
            for q = 1:length(neursToCompare)
                inputStructName_st{q} = strrep(fileNames(neursToCompare(q)).name,'.mat','');
                % load struct
                
                eval(['load ',fullfile(dirName,inputStructName_st{q})]);
                %     get amplitude value
                eval(['main_el_avg_amp(',num2str(q) ,') = ', ...
                    num2str(inputStructName_st{q}), '.main_el_avg_amp;']);
            end
            
            % sort by amp
            [xxx indSortAmp] = sort(main_el_avg_amp, 'ascend');
            
            clear selNeurTs
            selNeurTs{1}=0;
            r = 1;
            for iNeur = neursToCompare(indSortAmp)
                % ts are calculated so that stimulus begins at zero
                selNeurTs{r} = neuronTs{iNeur}.ts(find( and(neuronTs{iNeur}.ts>= startFrame,neuronTs{iNeur}.ts<= endFrame   )))-stimStartFr(1);
                r=r+1;
            end
            
            % find common ts
            selNeurTsCommon = selNeurTs{1};
            for r=2:length(selNeurTs)
                selNeurTsCommon = intersect(selNeurTsCommon, selNeurTs{r});
                
            end
            r = 1;
            for iNeur = neursToCompare(indSortAmp)
                
                %                 plot ts for neuron
                plot([(selNeurTs{r}); (selNeurTs{r})],...
                    [iSpacing*rowSpacing*ones(size(selNeurTs{r}))+rangeLim; ...
                    iSpacing*rowSpacing*ones(size(selNeurTs{r}))-rangeLim], 'Color', 'r')%colorMap(round(iParamSel/3*100),:))
                
                
                textPlacement = -preTimePlot*.80;
                
                % neuron id number
                neurIdNum = strrep(inputStructName_st{r},'st_','');
                
                text(textPlacement, iSpacing*rowSpacing, strcat('Ind',num2str( iNeur ),'Amp', ...
                    num2str(round2(main_el_avg_amp(indSortAmp(r)),0.1))));
                iSpacing = 1+iSpacing;
                r=r+1;
            end
            
            plot([0 0], [0, iSpacing*rowSpacing+rangeLim], ...
                'k');%
            % plot([x1 x2],[y1 y2])
            plot([stimEndFr-stimStartFr(1) stimEndFr-stimStartFr(1) ], [0, iSpacing*rowSpacing+rangeLim], ...
                'k');%
            stimEndFr-stimStartFr(1)
            xlim([-preTimePlot postTimePlot])
            
            % title info
            Settings.CURTAIN_DRIFT_VEL_UM = Settings.CURTAIN_DRIFT_VEL_PX*acqRate;
            Settings.CURTAIN_HEIGHT_UM = Settings.CURTAIN_HEIGHT_PX*acqRate;
            
            set(gca,'YTickLabel',{''})
            xlabel('Time (sec)');
            ylabel('Neuron Number');
            iPlot = iPlot +1;
        end
    end
    %     figure, plot(neuronMatchVals), title(neuronNoToCompare(iNeuronNoToCompare));
end






